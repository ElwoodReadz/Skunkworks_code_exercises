---COMPILE---
remove Motor.h include from Encoder.h:
Encoder.h:12:11: error: field ‘motor’ has incomplete type ‘Motor’
     Motor motor;
           ^

remove unsigned from type of RAND_SEED:
Encoder.cpp: In member function ‘void Encoder::update()’:
Encoder.cpp:20:33: error: invalid conversion from ‘int*’ to ‘unsigned int*’ [-fpermissive]
     count += ((rand_r(&RAND_SEED) % (2*ACCURACY_TICKS + 1)) - ACCURACY_TICKS) * output;
                                 ^

remove include of Outputable.h from Motor.h
Motor.h:5:1: error: expected class-name before ‘{’ token
 {
 ^

change outputable to be of non-pointer type in PIDController.h and PIDController.cpp
PIDController.h:33:30: error: cannot declare parameter ‘outputable’ to be of abstract type ‘Outputable’
     PIDController(Outputable outputable, Encoder* encoder, PIDControllerMode mode, double p, double i, double d, double f = 0);
                              ^
In file included from PIDController.h:4:0:
Outputable.h:4:7: note:   because the following virtual functions are pure within ‘Outputable’:
 class Outputable
       ^
Outputable.h:7:18: note: 	virtual void Outputable::set(double)
     virtual void set(double output) = 0;
                  ^
PIDController.h:18:16: error: cannot declare field ‘PIDController::outputable’ to be of abstract type ‘Outputable’
     Outputable outputable;
                ^


---LOGIC---

move bounds checking if statements in Motor::set() to after this->output assignment; allows motor to drive at >100% power

flip signs on bounds checking

remove division by LOOPS_PER_SECOND in Encoder::update(); will make motor position change 50x faster than it should

remove mode == POSITION_REV case in PIDController::update() and PIDController::onTarget(); will make position PID behave as speed PID

swap setpoint and curr at double error = setpoint - curr in PIDController::update(); will make PID operate backward

change "<"s to ">"s in PIDController::onTarget(); negates onTarget()'s intended output

remove double cast on noise in Encoder::update(); will remove all randomness from encoder readings

define ACCURACY_COUNTS as 20 in Encoder.h before #include "Constants.h" and redefine ACCURACY_COUNTS as 0 in Constants.h; will remove all randomness from encoder readings

change encoder to be of non-pointer type in PIDController.h and PIDController.cpp, and move encoder initialization to an initializer list; will prevent the real encoder object from being updated but not cause a compile error

have the pid reset fuction not reset one of the variables

remove conditional in PIDController::setMode()


---CRASHES---

change speed[] to speed.at() in Encoder.cpp and alter the bounds; causes out_of_range exception

change for(int i = 1; i < LOOPS_ACCELERATION; i++) to while(i != LOOPS_ACCELERATION - 1) and increment i twice in loop in Encoder::update(); causes segfault

