---COMPILE---
change Encoder(Motor motor) to Encoder(Outputable outputable)
Incompatible types. Found: 'src.Outputable', required: 'src.Motor'

remove int cast from assignment to noise in Encoder.update():
Incompatible types. Found: 'double', required: 'int'

remove implements Outputable from Motor declaration:
Cannot resolve constructor 'Encoder(src.Motor)'
'PidController(src.Outputable, src.Encoder, src.PidController.Mode, double, double, double)' in 'src.PidController' cannot be applied to '(src.Motor, src.Encoder, src.PidController.Mode, int, int, int)'
Cannot resolve constructor 'Encoder(src.Motor)'
Method does not override method from its superclass

replace commas in Mode definition with semicolons
Cannot resolve symbol 'POSITION_REV'
Identifier expected
Cannot resolve symbol 'SPEED'
Identifier expected

---LOGIC---

move bounds checking if statements in Motor.set() to after this.output assignment; allows motor to drive at >100% power

flip signs on bounds checking

remove division by LOOPS_PER_SECOND in Encoder.update(); will make motor position change 50x faster than it should

remove mode == POSITION_REV case in PIDController.update() and PIDController.onTarget(); will make position PID behave as speed PID

swap setpoint and curr at double error = setpoint - curr in PIDController.update(); will make PID operate backward

change "<"s to ">"s in PIDController.onTarget(); negates onTarget()'s intended output

define ACCURACY_COUNTS as 0 in Encoder constructor; will remove all randomness from encoder readings

call Encoder's copy constructor when setting PidController.encoder in constructor; will prevent the real encoder object from being updated but not cause a compile error

have the pid reset fuction not reset one of the variables

remove conditional in PIDController.setMode()


---CRASHES---

don't add initial entries in speed; causes exception

change for(int i = 1; i < LOOPS_ACCELERATION; i++) to while(i++ != LOOPS_ACCELERATION - 1) and increment i twice in loop in Encoder.update(); causes exception

